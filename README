


    
    This project is a distributed mock cryptocurrency miner. The system utilizes three main components the client, the pool, and the miner.
    In order to simulate cryptocurrency mining on initialization of a call to start mining, the client passes the pool an integer upperbound, and a data string.
    Then each integer [0, upperbound] is hashed with the data string. The integer in the set [0,upperbound] that hashes to the smallest value will be our found
    nonce that we then will pass back to the client in a proofOfWorkMessage. In order to support concurrent work and speed up execution the set [0,upperbound]
    is broken into intervals that represent jobs, which are then assigned to singular miners. Each miner finds the nonce with the smallest hash value in its
    interval and returns it in a proofOfWorkMessage. Once all jobs are complete we can simply select the nonce with the smallest hash value out of all the
    returned nonces, and return this to the client.
    
    On initial Download Run In Project Directory:
    "go get -u ./..."
    
    The project includes a comprehensive correctness and benchmark test suite. In order to run the tests,
    
    "cd test"
    "go test -coverprofile=coverage.out -coverpkg=liteminer/pkg"
    




